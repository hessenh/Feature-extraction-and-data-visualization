import numpy as np
import pandas as pd
import math 


data

def fft_spectral_entropy(l):
    fft = np.fft.fft(l)
    fft = fft[0:len(l)/2]
    psum=0
    H=0

    for i in range(0,len(l)/2):
        a = (1.0/len(l)/2)*abs(fft[i])*abs(fft[i])
        psum = psum + a

    for i in range(0, len(l)/2):
        a = (1.0/len(l)/2)*abs(fft[i])*abs(fft[i])
        Pi = a/psum
        if Pi!=0:
        	H = H + Pi*np.log2(Pi) 

    H=-H
    
    return H


H=fft_spectral_entropy(data)
